---

- name: Install OpenSearch Snapshot requirements
  apt:
    name:
      - jq
      - cron
    state: present
    update_cache: true

- name: Create OpenSearch directory credentials for GCP
  file:
    path: "{{ opensearch_keys_dir }}"
    state: directory
    mode: 0750
    recurse: true

- name: Copy GCP service account file
  copy:
    src: "{{ gcp_service_account_host_file }}"
    dest: "{{ gcp_service_account_file }}"
    owner: '1000'
    group: '1000'
    mode: 0644

- name: Copy credentials file to OpenSearch manager container
  command: docker cp {{ gcp_service_account_file }} {{ opensearch_docker_container }}:{{ gcs_cred_file_container }}
  changed_when: false
  when: "'opensearch-manager' in inventory_hostname or 'all_in_one' in groups"

- name: Copy credentials file to OpenSearch data container
  command: docker cp {{ gcp_service_account_file }} {{ opensearch_docker_container }}:{{ gcs_cred_file_container }}
  changed_when: false
  when: "'opensearch-data' in inventory_hostname"

- name: Register secrets in the OpenSearch manager keystore
  command: >
    docker exec -i -e OPENSEARCH_JAVA_OPTS="-Xms4m -Xmx64m" {{ opensearch_docker_container }}
    bin/opensearch-keystore add-file gcs.client.default.credentials_file
    {{ gcs_cred_file_container }} --force
  changed_when: false
  when: "'opensearch-manager' in inventory_hostname or 'all_in_one' in groups"

- name: Register secrets in the OpenSearch data keystore
  command: >
    docker exec -i -e OPENSEARCH_JAVA_OPTS="-Xms4m -Xmx64m" {{ opensearch_docker_container }}
    bin/opensearch-keystore add-file gcs.client.default.credentials_file
    {{ gcs_cred_file_container }} --force
  changed_when: false
  when: "'opensearch-data' in inventory_hostname"

- name: Reload opensearch secure settings
  uri:
    url: "{{ opensearch_snapshots_url }}/_nodes/reload_secure_settings"
    method: POST
    client_cert: "{{ certs_dir }}/{{ certs_files.admin_cert }}"
    client_key: "{{ certs_dir }}/{{ certs_files.admin_key }}"
    validate_certs: false
  run_once: true
  when: "'opensearch-manager' in inventory_hostname or 'all_in_one' in groups"

- name: Delete credentials file from the manager container
  community.docker.docker_container_exec:
    container: "{{ opensearch_docker_container }}"
    user: opensearch
    command: rm {{ gcs_cred_file_container }}
  ignore_errors: true
  changed_when: false
  when: "'opensearch-manager' in inventory_hostname or 'all_in_one' in groups"

- name: Delete credentials file from the data container
  community.docker.docker_container_exec:
    container: "{{ opensearch_docker_container }}"
    user: opensearch
    command: rm {{ gcs_cred_file_container }}
  ignore_errors: true
  changed_when: false
  when: "'opensearch-data' in inventory_hostname"

- name: "Create snapshot repository '{{ opensearch_snapshots_repository }}'"
  uri:
    url: "{{ opensearch_snapshots_url }}/_snapshot/{{ opensearch_snapshots_repository }}"
    method: PUT
    body_format: json
    body:
      type: "{{ opensearch_snapshots_repo_type }}"
      settings:
        bucket: "{{ backups_assets_bucket }}"
        base_path: "{{ opensearch_base_path }}"
    client_cert: "{{ certs_dir }}/{{ certs_files.admin_cert }}"
    client_key: "{{ certs_dir }}/{{ certs_files.admin_key }}"
    validate_certs: false
  run_once: true
  when: "'opensearch-manager' in inventory_hostname or 'all_in_one' in groups"

- name: "Create snapshot repository '{{ restore_snapshot.repository }}'"
  uri:
    url: "{{ opensearch_snapshots_url }}/_snapshot/{{ restore_snapshot.repository }}"
    method: PUT
    body_format: json
    body:
      type: "{{ opensearch_snapshots_repo_type }}"
      settings:
        bucket: "{{ restore_snapshot.bucket }}"
        base_path: "{{ restore_snapshot.base_path }}"
    client_cert: "{{ certs_dir }}/{{ certs_files.admin_cert }}"
    client_key: "{{ certs_dir }}/{{ certs_files.admin_key }}"
    validate_certs: false
  run_once: true
  when: restore_snapshot is defined

- name: "Restore indices from {{ restore_snapshot.repository }} of {{ restore_snapshot.bucket }} bucket"
  uri:
    url: "{{ opensearch_snapshots_url }}/_snapshot/{{ restore_snapshot.repository }}/{{ restore_snapshot.name }}/_restore"
    method: POST
    body_format: json
    body:
      indices: "{{ restore_snapshot.index_list }}"
      ignore_unavailable: true
      include_global_state: false
    client_cert: "{{ certs_dir }}/{{ certs_files.admin_cert }}"
    client_key: "{{ certs_dir }}/{{ certs_files.admin_key }}"
    validate_certs: false
  run_once: true
  when: restore_snapshot is defined

- name: Configure OpenSearch notification channels for Slack
  include_tasks: slack_channel.yml
  loop: "{{ opensearch_notification_channels }}"
  when:
    - "'opensearch-manager' in inventory_hostname or 'all_in_one' in groups"
    - opensearch_notification_channels is defined and opensearch_notification_channels | length > 0

- name: "Check if snapshot policy {{ opensearch_snapshot_policy.policy_id }} exists"
  uri:
    url: "{{ opensearch_snapshots_url }}/_plugins/_sm/policies/{{ opensearch_snapshot_policy.policy_id }}"
    method: GET
    client_cert: "{{ certs_dir }}/{{ certs_files.admin_cert }}"
    client_key: "{{ certs_dir }}/{{ certs_files.admin_key }}"
    validate_certs: false
    status_code: 200, 404
  register: opensearch_snapshot_policy_check
  when:
    - "'opensearch-manager' in inventory_hostname or 'all_in_one' in groups"
    - opensearch_snapshot_policy is defined

- name: "Create Snapshot policy {{ opensearch_snapshot_policy.policy_id }}"
  uri:
    url: "{{ opensearch_snapshots_url }}/_plugins/_sm/policies/{{ opensearch_snapshot_policy.policy_id }}"
    method: POST
    body_format: json
    body:
      description: "{{ opensearch_snapshot_policy.description }}"
      creation:
        schedule:
          cron:
            expression: "{{ opensearch_snapshot_policy.creation_cron_expression }}"
            timezone: "{{ opensearch_snapshot_policy.timezone }}"
        time_limit: "{{ opensearch_snapshot_policy.time_limit }}"
      deletion:
        schedule:
          cron:
            expression: "{{ opensearch_snapshot_policy.deletion_cron_expression }}"
            timezone: "{{ opensearch_snapshot_policy.timezone }}"
        condition:
          max_age: "{{ opensearch_snapshot_policy.retention.max_age }}"
          max_count: "{{ opensearch_snapshot_policy.retention.max_count }}"
          min_count: "{{ opensearch_snapshot_policy.retention.min_count }}"
        time_limit: "{{ opensearch_snapshot_policy.time_limit }}"
      snapshot_config:
        date_format: "{{ opensearch_snapshot_policy.date_format }}"
        timezone: "{{ opensearch_snapshot_policy.timezone }}"
        indices: "{{ opensearch_snapshot_policy.indices }}"
        repository: "{{ opensearch_snapshots_repository }}"
        ignore_unavailable: true
        include_global_state: false
        partial: false
      notification:
        channel:
          id: "{{ opensearch_snapshot_policy.notification_channel_id }}"
        conditions:
          creation: "{{ opensearch_snapshot_policy.notification_conditions.creation }}"
          deletion: "{{ opensearch_snapshot_policy.notification_conditions.deletion }}"
          failure: "{{ opensearch_snapshot_policy.notification_conditions.failure }}"
          time_limit_exceeded: false
    status_code: 200, 201
    client_cert: "{{ certs_dir }}/{{ certs_files.admin_cert }}"
    client_key: "{{ certs_dir }}/{{ certs_files.admin_key }}"
    validate_certs: false
  when:
    - "'opensearch-manager' in inventory_hostname or 'all_in_one' in groups"
    - opensearch_snapshot_policy is defined
    - opensearch_snapshot_policy_check is not defined or opensearch_snapshot_policy_check.status != 200

- name: "Update Snapshot policy {{ opensearch_snapshot_policy.policy_id }}"
  uri:
    url: "{{ opensearch_snapshots_url }}/_plugins/_sm/policies/{{ opensearch_snapshot_policy.policy_id }}?if_seq_no={{ opensearch_snapshot_policy_check.json._seq_no }}&if_primary_term={{ opensearch_snapshot_policy_check.json._primary_term }}"
    method: PUT
    body_format: json
    body:
      description: "{{ opensearch_snapshot_policy.description }}"
      creation:
        schedule:
          cron:
            expression: "{{ opensearch_snapshot_policy.creation_cron_expression }}"
            timezone: "{{ opensearch_snapshot_policy.timezone }}"
        time_limit: "{{ opensearch_snapshot_policy.time_limit }}"
      deletion:
        schedule:
          cron:
            expression: "{{ opensearch_snapshot_policy.deletion_cron_expression }}"
            timezone: "{{ opensearch_snapshot_policy.timezone }}"
        condition:
          max_age: "{{ opensearch_snapshot_policy.retention.max_age }}"
          max_count: "{{ opensearch_snapshot_policy.retention.max_count }}"
          min_count: "{{ opensearch_snapshot_policy.retention.min_count }}"
        time_limit: "{{ opensearch_snapshot_policy.time_limit }}"
      snapshot_config:
        date_format: "{{ opensearch_snapshot_policy.date_format }}"
        timezone: "{{ opensearch_snapshot_policy.timezone }}"
        indices: "{{ opensearch_snapshot_policy.indices }}"
        repository: "{{ opensearch_snapshots_repository }}"
        ignore_unavailable: true
        include_global_state: false
        partial: false
      notification:
        channel:
          id: "{{ opensearch_snapshot_policy.notification_channel_id }}"
        conditions:
          creation: "{{ opensearch_snapshot_policy.notification_conditions.creation }}"
          deletion: "{{ opensearch_snapshot_policy.notification_conditions.deletion }}"
          failure: "{{ opensearch_snapshot_policy.notification_conditions.failure }}"
          time_limit_exceeded: false
    status_code: 200, 201
    client_cert: "{{ certs_dir }}/{{ certs_files.admin_cert }}"
    client_key: "{{ certs_dir }}/{{ certs_files.admin_key }}"
    validate_certs: false
  when:
    - "'opensearch-manager' in inventory_hostname or 'all_in_one' in groups"
    - opensearch_snapshot_policy is defined
    - opensearch_snapshot_policy_check is defined and opensearch_snapshot_policy_check.status == 200
