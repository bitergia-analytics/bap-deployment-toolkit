---

- name: All in one host
  set_fact:
    discovery_seed_hosts: "{{ ansible_default_ipv4.address }}"
    cluster_initial_master_nodes: "{{ groups['all_in_one'] }}"
    number_of_shards: 1
  when: "'all_in_one' in groups and inventory_hostname in groups['all_in_one']"

- name: Create OpenSearch configuration directory
  file:
    path: "{{ opensearch_workdir }}"
    state: directory
    mode: 0750
    recurse: true

- name: Copy gsutil credentials file
  template:
    src: boto.j2
    dest: ~/.boto
    mode: 0500
    owner: "{{ ansible_user_id }}"

- name: Configure OpenSearch certificates
  import_tasks: certificates.yml

- name: Setup OpenSearch configuration
  template:
    src: opensearch.yml.j2
    dest: "{{ opensearch_workdir }}/opensearch.yml"
    owner: '1000'
    group: '1000'
    mode: 0660

- name: Create OpenSearch logs directory
  file:
    path: "{{ opensearch_logs_dir }}"
    state: directory
    mode: 0777
    recurse: true

- name: Setup OpenSearch logs
  template:
    src: log4j2.properties.j2
    dest: "{{ opensearch_workdir }}/log4j2.properties"
    owner: '1000'
    group: '1000'
    mode: 0660

- name: Create OpenSearch Security files
  file:
    path: "{{ opensearch_security_backup_dir }}"
    state: directory
    owner: '1000'
    group: '1000'
    mode: 0660
    recurse: true

- name: Configure OpenSearch security
  import_tasks: security_config.yml

- name: Configure Kernel vm.max_map_count setting
  sysctl:
    name: vm.max_map_count
    value: '262144'
    sysctl_set: true
    state: present
    reload: true
  tags: sysctl

- name: Remove old OpenSearch container
  docker_container:
    name: "{{ opensearch_docker_container }}"
    state: absent

- name: "Create a docker network: {{ docker_network_name }}"
  docker_network:
    name: "{{ docker_network_name }}"

- name: Start OpenSearch container
  docker_container:
    name: "{{ opensearch_docker_container }}"
    image: "{{ opensearch_docker_image }}:{{ opensearch_version }}"
    networks:
      - name: "{{ docker_network_name }}"
        aliases:
          - "{{ opensearch_docker_container | replace('_','-') }}"
    env:
      DISABLE_INSTALL_DEMO_CONFIG=true
      bootstrap.memory_lock=true
      "OPENSEARCH_JAVA_OPTS=-Xms{{ opensearch_cluster_heap_size }} -Xmx{{ opensearch_cluster_heap_size }}"
    ulimits:
      memlock:-1:-1
      nofile:65536:65536
    volumes:
      - odfe-data:/usr/share/opensearch/data
      - "{{ certs_dir }}/{{ certs_files.ca_cert }}:/usr/share/opensearch/config/{{ certs_files.ca_cert }}"
      - "{{ certs_dir }}/{{ certs_files.admin_cert }}:/usr/share/opensearch/config/{{ certs_files.admin_cert }}"
      - "{{ certs_dir }}/{{ certs_files.admin_key }}:/usr/share/opensearch/config/{{ certs_files.admin_key }}"
      - "{{ certs_dir }}/{{ certs_files.node_cert }}:/usr/share/opensearch/config/{{ certs_files.node_cert }}"
      - "{{ certs_dir }}/{{ certs_files.node_key }}:/usr/share/opensearch/config/{{ certs_files.node_key }}"
      - "{{ opensearch_workdir }}/opensearch.yml:/usr/share/opensearch/config/opensearch.yml"
      - "{{ opensearch_workdir }}/log4j2.properties:/usr/share/opensearch/config/log4j2.properties"
      - "{{ opensearch_security_dir }}/config.yml:/usr/share/opensearch/config/opensearch-security/config.yml"
      - "{{ opensearch_security_dir }}/internal_users.yml:/usr/share/opensearch/config/opensearch-security/internal_users.yml"
      - "{{ opensearch_security_dir }}/roles_mapping.yml:/usr/share/opensearch/config/opensearch-security/roles_mapping.yml"
      - "{{ opensearch_security_backup_dir }}:/tmp/backup/"
      - "{{ opensearch_logs_dir }}:/usr/share/opensearch/logs"
    ports:
      - "{{ network.publish_host }}:9200:9200"
      - "{{ network.publish_host }}:9300:9300"
      - "{{ network.publish_host }}:9600:9600"
      - "127.0.0.1:9200:9200"
      - "127.0.0.1:9300:9300"
      - "127.0.0.1:9600:9600"
    exposed_ports:
      - "9200"
      - "9300"
      - "9600"

- name: Init OpenSearch security plugin
  import_tasks: security_admin.yml

- name: Configure OpenSearch Security Backup
  import_tasks: security_backup.yml

- name: Set default template for indices
  uri:
    url: "{{ opensearch_endpoint }}/_template/default"
    method: PUT
    status_code: 200
    client_cert: "{{ certs_dir }}/{{ certs_files.admin_cert }}"
    client_key: "{{ certs_dir }}/{{ certs_files.admin_key }}"
    body_format: json
    body:
      template: "*"
      order: -1
      settings:
        number_of_shards: "{{ number_of_shards }}"
        auto_expand_replicas: "{{ auto_expand_replicas }}"
    validate_certs: false
  register: result
  until: result.status == 200
  retries: 10
  delay: 2
  run_once: true

- name: Wait for OpenSearch container(s) to be available
  uri:
    url: "{{ opensearch_endpoint }}/_cluster/health?wait_for_status=yellow&timeout=60s"
    client_cert: "{{ certs_dir }}/{{ certs_files.admin_cert }}"
    client_key: "{{ certs_dir }}/{{ certs_files.admin_key }}"
    timeout: 60
    validate_certs: false
  register: result
  until: result.status == 200
  retries: 20
  delay: 5

- name: Configure OpenSearch Snapshots
  import_tasks: snapshots.yml

- name: Create cron job for start OpenSearch docker container
  cron:
    name: "Start OpenSearch docker container"
    user: "{{ ansible_user_id }}"
    job: "docker start {{ opensearch_docker_container }}"
    backup: true
