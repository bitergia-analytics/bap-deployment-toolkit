---

- name: All in one host
  set_fact:
    discovery_seed_hosts: "{{ ansible_default_ipv4.address }}"
    cluster_initial_manager_nodes: "{{ groups['all_in_one'] }}"
    number_of_shards: 1
  when: "'all_in_one' in groups and inventory_hostname in groups['all_in_one']"

- name: Create OpenSearch configuration directory
  file:
    path: "{{ opensearch_workdir }}"
    state: directory
    mode: 0750
    recurse: true

- name: Configure OpenSearch certificates
  import_tasks: certificates.yml

- name: Create OpenSearch logs directory
  file:
    path: "{{ opensearch_logs_dir }}"
    state: directory
    mode: 0777
    recurse: true

- name: Setup OpenSearch logs
  template:
    src: log4j2.properties.j2
    dest: "{{ opensearch_workdir }}/log4j2.properties"
    owner: '1000'
    group: '1000'
    mode: 0660

- name: Create OpenSearch Security files
  file:
    path: "{{ opensearch_security_backup_dir }}"
    state: directory
    owner: '1000'
    group: '1000'
    mode: 0660
    recurse: true

- name: Configure OpenSearch security
  import_tasks: security_config.yml

- name: Configure Kernel vm.max_map_count setting
  sysctl:
    name: vm.max_map_count
    value: '262144'
    sysctl_set: true
    state: present
    reload: true
  tags: sysctl

- name: "Create a docker network: {{ docker_network_name }}"
  docker_network:
    name: "{{ docker_network_name }}"

- name: OpenSearch manager node
  import_tasks: opensearch_manager.yml
  when: "'opensearch-manager' in inventory_hostname or 'all_in_one' in groups"

- name: OpenSearch data node
  import_tasks: opensearch_data.yml
  when: "'opensearch-data' in inventory_hostname"

- name: Init OpenSearch security plugin
  import_tasks: security_admin.yml
  when: "'opensearch-manager' in inventory_hostname or 'all_in_one' in groups"

- name: Configure OpenSearch Security Backup
  import_tasks: security_backup.yml
  when: "'opensearch-manager' in inventory_hostname or 'all_in_one' in groups"

- name: Set default template for indices
  uri:
    url: "{{ opensearch_endpoint }}/_template/default"
    method: PUT
    status_code: 200
    client_cert: "{{ certs_dir }}/{{ certs_files.admin_cert }}"
    client_key: "{{ certs_dir }}/{{ certs_files.admin_key }}"
    body_format: json
    body:
      template: "*"
      order: -1
      settings:
        number_of_shards: "{{ number_of_shards }}"
        auto_expand_replicas: "{{ auto_expand_replicas }}"
    validate_certs: false
  register: result
  until: result.status == 200
  retries: 10
  delay: 2
  run_once: true

- name: Wait for OpenSearch container(s) to be available
  uri:
    url: "{{ opensearch_endpoint }}/_cluster/health?wait_for_status=yellow&timeout=60s"
    client_cert: "{{ certs_dir }}/{{ certs_files.admin_cert }}"
    client_key: "{{ certs_dir }}/{{ certs_files.admin_key }}"
    timeout: 60
    validate_certs: false
  register: result
  until: result.status == 200
  retries: 20
  delay: 5

- name: Configure OpenSearch Snapshots
  import_tasks: snapshots.yml

- name: Create cron job for start OpenSearch docker container
  cron:
    name: "Start OpenSearch docker container"
    user: "{{ ansible_user_id }}"
    job: "docker start {{ opensearch_docker_container }}"
    backup: true
